# kube-prometheus-stack Helm Chart Values
# Optimized for Minikube with limited resources
# This replaces your standalone Grafana with a complete monitoring stack

# Global settings
nameOverride: ""
fullnameOverride: ""

# Prometheus configuration
prometheus:
  enabled: true
  
  prometheusSpec:
    # Resource limits for Minikube
    resources:
      requests:
        cpu: 200m
        memory: 400Mi
      limits:
        cpu: 500m
        memory: 800Mi
    
    # Storage configuration
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    
    # Retention settings
    retention: 7d
    retentionSize: 4GB
    
    # Replica count
    replicas: 1
    
    # Service monitor selector (monitor all services with labels)
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    
    # Enable ingress for external access
    ingress:
      enabled: false  # We'll use port-forward for now

# Grafana configuration (K8s infrastructure monitoring)
grafana:
  enabled: true  # Enable for K8s monitoring dashboards
  
  # Admin credentials (different from your model monitoring Grafana)
  adminPassword: "k8sGrafana!2025"  # Different password for security
  
  # Resource limits
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  
  # Persistence
  persistence:
    enabled: true
    size: 2Gi
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
  
  # Ingress configuration
  ingress:
    enabled: false
  
  # Default K8s dashboards (this is the main benefit!)
  defaultDashboardsEnabled: true
  
  # Grafana configuration
  grafana.ini:
    server:
      protocol: http
      http_port: 3000
      domain: grafanak8s.local
      # Remove the problematic root_url that was causing redirects
      serve_from_sub_path: true
    security:
      disable_gravatar: true
    users:
      allow_sign_up: false
      allow_org_create: false
      auto_assign_org: true
      auto_assign_org_role: Viewer
    auth.anonymous:
      enabled: false
    log:
      level: info

# Alertmanager configuration
alertmanager:
  enabled: true
  
  alertmanagerSpec:
    # Resource limits
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        cpu: 100m
        memory: 128Mi
    
    # Storage
    storage:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 1Gi
    
    # Replica count
    replicas: 1

# Node Exporter (collects node metrics)
nodeExporter:
  enabled: true
  
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

# Kube State Metrics (collects Kubernetes object metrics)
kubeStateMetrics:
  enabled: true
  
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

# Prometheus Operator
prometheusOperator:
  enabled: true
  
  resources:
    requests:
      cpu: 100m
      memory: 100Mi
    limits:
      cpu: 200m
      memory: 200Mi
  
  # Admission webhooks
  admissionWebhooks:
    enabled: true
    patch:
      enabled: true
      resources:
        requests:
          cpu: 50m
          memory: 64Mi
        limits:
          cpu: 100m
          memory: 128Mi

# Default rules (alerting rules)
defaultRules:
  create: true
  rules:
    alertmanager: true
    etcd: true
    configReloaders: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverSlos: true
    kubelet: true
    kubeProxy: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    nodeExporterAlerting: true
    nodeExporterRecording: true
    prometheus: true
    prometheusOperator: true

# ServiceMonitor for ingress-nginx (monitor your ingress controller)
prometheus-node-exporter:
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi
