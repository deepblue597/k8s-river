apiVersion: v1
kind: Service
metadata:
  name: minio
spec:
  selector:
    app: minio-app # must match the app label in the deployment
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      name: api

---
# Console service for external access
apiVersion: v1
kind: Service
metadata:
  name: minio-console
spec:
  selector:
    app: minio-app
  type: NodePort
  ports:
    - port: 9001
      targetPort: 9001
      nodePort: 30901 # You can access via <node-ip>:30901
      name: console

---
# Headless service for StatefulSet pod-to-pod communication
apiVersion: v1
kind: Service
metadata:
  name: minio-headless
spec:
  clusterIP: None # This makes it headless
  selector:
    app: minio-app
  ports:
    - port: 9000
      targetPort: 9000
      name: api

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: minio-app # name of the stateful set
spec:
  selector:
    matchLabels:
      app: minio-app # must match the app label in the pod template
  serviceName: "minio-headless" # headless service name
  replicas: 2
  template:
    metadata:
      labels:
        app: minio-app # label for the pod
    spec:
      containers:
        - name: minio
          image: quay.io/minio/minio
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          ports:
            - containerPort: 9000
              name: minio
            - containerPort: 9001
              name: minio-console
          volumeMounts:
            - name: minio-storage
              mountPath: /data

          # Define the command and arguments to run MinIO in distributed mode
          command:
            - /bin/bash
            - -c
          args:
            - minio server http://minio-app-{0...1}.minio-headless.default.svc.cluster.local:9000/data --console-address ":9001"
          env:
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: MINIO_ACCESS_KEY
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: minio-secrets
                  key: MINIO_SECRET_KEY
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

  # Define volume claim templates for persistent storage
  volumeClaimTemplates:
    - metadata:
        name: minio-storage
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi # Adjust size as needed in production
